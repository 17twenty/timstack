// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package store

import (
	"context"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, display_name, name, credentials)
VALUES ($1, $2, $3, $4)
RETURNING id, display_name, name, credentials, created_at, updated_at
`

type CreateUserParams struct {
	ID          string
	DisplayName string
	Name        string
	Credentials pqtype.NullRawMessage
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.DisplayName,
		arg.Name,
		arg.Credentials,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Name,
		&i.Credentials,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, data, expires FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Data,
		&i.Expires,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, display_name, name, credentials, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Name,
		&i.Credentials,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, display_name, name, credentials, created_at, updated_at FROM users
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Name,
		&i.Credentials,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, display_name, name, credentials, created_at, updated_at FROM users
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Name,
		&i.Credentials,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertIntoSessions = `-- name: InsertIntoSessions :one
INSERT INTO sessions (id, user_id, data, expires)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, data, expires
`

type InsertIntoSessionsParams struct {
	ID      string
	UserID  string
	Data    pqtype.NullRawMessage
	Expires time.Time
}

func (q *Queries) InsertIntoSessions(ctx context.Context, arg InsertIntoSessionsParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, insertIntoSessions,
		arg.ID,
		arg.UserID,
		arg.Data,
		arg.Expires,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Data,
		&i.Expires,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET display_name = $2,
    name = $3,
    credentials = $4
WHERE id = $1
RETURNING id, display_name, name, credentials, created_at, updated_at
`

type UpdateUserParams struct {
	ID          string
	DisplayName string
	Name        string
	Credentials pqtype.NullRawMessage
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.DisplayName,
		arg.Name,
		arg.Credentials,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Name,
		&i.Credentials,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
